// Generated by CoffeeScript 1.4.0

/*
doT Express Master of Ceremonies
@author Dannel Albert <cuebix@gmail.com>
*/


(function() {
  var cache, curOptions, curPath, curVarname, def, defaultOptions, doT, fs, mergeObjects, path, renderFile, settings, workingPaths;

  fs = require("fs");

  path = require("path");

  doT = require("dot");

  cache = {};

  workingPaths = [];

  curOptions = null;

  curVarname = null;

  curPath = null;

  settings = {
    fileExtension: "def"
  };

  defaultOptions = {
    "cache": true
  };

  def = {
    "include": function(filename) {
      var returnValue, template;
      returnValue = void 0;
      if (!path.extname(filename)) {
        filename = "" + filename + "." + settings.fileExtension;
      }
      if (curPath) {
        filename = path.resolve(curPath, filename);
      }
      curPath = path.dirname(filename);
      workingPaths.push(curPath);
      try {
        if (curOptions.cache && filename in cache) {
          template = cache[filename];
        } else {
          template = cache[filename] = fs.readFileSync(filename, 'utf8');
        }
        returnValue = doT.template(template, curOptions, def)(curOptions[curVarname]);
      } catch (err) {
        workingPaths.pop();
        curPath = workingPaths.length ? workingPaths[workingPaths.length - 1] : null;
        throw err;
      }
      curPath = workingPaths.length ? workingPaths[workingPaths.length - 1] : null;
      return returnValue;
    }
  };

  mergeObjects = function(target) {
    var argLength, deep, i, key;
    deep = false;
    if (typeof target !== "object") {
      deep = (target ? true : false);
      if (deep) {
        target = (arguments.legnth > 1 ? arguments[1] : void 0);
      }
    }
    i = (deep ? 2 : 1);
    argLength = arguments.length;
    while (i < argLength) {
      for (key in arguments[i]) {
        if (deep && typeof arguments[i] === "object" && typeof target[key] === "object") {
          target[key] = mergeObjects(deep, target[key], arguments[i][key]);
        } else {
          target[key] = arguments[i][key];
        }
      }
      i++;
    }
    return target;
  };

  renderFile = function(filename, options, fn) {
    if (typeof options === "function") {
      fn = options;
      options = doT.templateSettings;
    }
    if (typeof fn !== "function") {
      fn = (function() {});
    }
    mergeObjects(options, defaultOptions, doT.templateSettings);
    curVarname = options.varname || doT.templateSettings.varname;
    curOptions = options;
    try {
      return fn(null, def.include(filename));
    } catch (err) {
      return fn(err);
    }
  };

  exports.__express = renderFile;

  exports.renderFile = renderFile;

  exports.init = function(set) {
    settings = mergeObjects(settings, set);
    return exports;
  };

}).call(this);
